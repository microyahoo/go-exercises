package main

import (
	"fmt"
	"math"
	"runtime"
	"strconv"
)

func main() {
	var s uint = 33
	var i = 1 << s
	fmt.Printf("%T, %b\n", i, i)

	var j int32 = 1 << s
	fmt.Printf("%T, %b\n", j, j)

	var m int = 1.0 << s
	fmt.Printf("%T, %b\n", m, m)

	var p = 1<<s == 1<<33 // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int
	fmt.Printf("%T, %b\n", p, p)

	var a uint = math.MaxUint64
	fmt.Println("Hello, playground", a, runtime.Version(), strconv.IntSize)

	// fmt.Println(f2(2)())
	for i := 0; i < 5; i++ {
		defer func() {
			fmt.Println(i)
		}()
	}

	for i := 0; i < 5; i++ {
		defer func(i int) {
			fmt.Println(i)
		}(i)
	}
}

func f() *cursor {
	var c cursor
	c.x = 500
	// noinline()
	return &c
}

type cursor struct {
	x int
}

func f2(i int) func() int {
	return func() int {
		i++
		return i
	}
}

// ./test_operators.go:16:13: j escapes to heap
// ./test_operators.go:16:13: j escapes to heap
// ./test_operators.go:16:12: main []interface {} literal does not escape
// ./test_operators.go:16:12: io.Writer(os.Stdout) escapes to heap
// ./test_operators.go:19:13: m escapes to heap
// ./test_operators.go:19:13: m escapes to heap
// ./test_operators.go:19:12: main []interface {} literal does not escape
// ./test_operators.go:19:12: io.Writer(os.Stdout) escapes to heap
// ./test_operators.go:22:13: p escapes to heap
// ./test_operators.go:22:13: p escapes to heap
// ./test_operators.go:22:12: main []interface {} literal does not escape
// ./test_operators.go:22:12: io.Writer(os.Stdout) escapes to heap
// ./test_operators.go:25:14: "Hello, playground" escapes to heap
// ./test_operators.go:25:14: a escapes to heap
// ./test_operators.go:25:53: runtime.Version() escapes to heap
// ./test_operators.go:25:53: strconv.IntSize escapes to heap
// ./test_operators.go:25:13: main []interface {} literal does not escape
// ./test_operators.go:25:13: io.Writer(os.Stdout) escapes to heap
// ./test_operators.go:29:9: func literal escapes to heap
// ./test_operators.go:35:9: func literal escapes to heap
// ./test_operators.go:30:15: i escapes to heap
// ./test_operators.go:30:15: main.func1 []interface {} literal does not escape
// ./test_operators.go:30:15: io.Writer(os.Stdout) escapes to heap
// ./test_operators.go:36:15: i escapes to heap
// ./test_operators.go:36:15: main.func2 []interface {} literal does not escape
// ./test_operators.go:36:15: io.Writer(os.Stdout) escapes to heap
// ./test_operators.go:42:6: moved to heap: c
// ./test_operators.go:52:9: moved to heap: i
// ./test_operators.go:53:9: func literal escapes to heap
// <autogenerated>:1: (*File).close .this does not escape
